*SwitchColor.txt*  Plugin control for handling colorschemes. ver. 0.0.7
========================================================================
1. Introduction		*intro-SwitchColor*
   Contents: 			|index-SwitchColor|

|Excerpt:|

SwitchColor loops you though color schemes by hotkey, and
makes Vim remember your choice.

Enables organizing your color schemes into themes if you make
symbolic links to color schemes files in dedicated folders,
and edit a ready boilerplate function in the plugin.

Author: Tommy Bollman  (tommy.bollman AT gmaail DOT com)
For Vim version 7.0 and above Last change: May 3, 2022
Help and insights from CoolioDood@r/Vim:Reddit. Concerning
safe and practical key mappings.  Thank you mate! NSFW indeed! :)

See: Installation			|insta-SwitchColor|

Vim License.  

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute,
sub license, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANT-ABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

Copyright (c) 2022 Tommy Bollman/McUsr 
========================================================================
2. Contents  			*index-SwitchColor*

1.	Introduction		|intro-SwitchColor|	  	In a nut shell.
2.	Contents  			|index-SwitchColor|   	This.
3. 	Installatio			|insta-SwitchColor|   	How to install.
4.	Set Hotkeys			|hotky-SwitchColor|   	Setting up Hotkeys.
5.	Test Hotkeys		|tstky-SwitchColor|   	Testing them.
6.	Customizing  		|custom-SwitchColor|  	Other config. options.
6.1 Display var 		|dbgtech-SwitchColor| 	Showing the variables.
6.2 Config settings |cfgvar-SwitchColor|	 	Configuration variables. 
7. 	Correct File 		|dotf-SwitchColor| 			for saving of color.
8. 	Customizing     |them-SwitchColor|    	Making filtered collections.
========================================================================
3	Installation	*insta-SwitchColor*

* Drop/copy the plugin SwitchColor.vim into your  plugins folder in your ~/.vim
		or $HOME/vimfiles folder. If you don't have the plugins directory, then you
		must make it by executing the command below from within Vim, and make your
		local vim folder too if that is also missing. The commands
		below are for Unix/OsX, There are parallel commands for MS.Windows: >

		:!mkdir ~/.vim
		:!mkdir ~/.vim/plugin
		:!cp /whatever/path/to/SwitchColor.vim ~/.vim/plugin

* Drop/copy the help file SwitchColor.txt into you doc folder  in your ~/.vim
		or $HOME/vimfiles folder. Commands same as above, from within Vim but you should have a 
		local ~/.vim directory by now, if not, make it as done above. >

	:!mkdir ~/.vim/doc
	:!cp /whatever/path/to/SwitchColor.txt ~/.vim/doc

* Next step is to install the helpfile into the help system, so you can write
  |:help SwitchColor| >

	:helptags ~/.vim/doc

* Quit Vim. Start it up again, so the SwitchColor is activated, choose a
colorscheme "manually" by >

	:colorscheme blue 

or some other scheme, that wasn't active when you started Vim.
Quit Vim again, then Start up again, Vim should now use your chosen
colorscheme, or, there is an error somewhere, probably with the file that
stores the color. More about that in: |dotf-SwitchColor|

========================================================================
4.	Setting Hotkeys	*hotky-SwitchColor*

SwitchColor installs services on the following hotkeys by default: 

	<M-5>		(opt/alt-5):		Cycle backwards through colorschemes. ~

	<M-6>		(opt/alt-6):		Cycle forward though colorschemes. ~

	<M-c>		(opt/alt-c):		Shows all colorschemes installed for easy selection. ~

	<M-g>		(opt/alt-g): 	Display the name of the current colorscheme. ~

	
* 	There are 1 variable you *need* to set in your |vimrc| if you *don't*
			want to go with the predefined hotkeys.
			This variable must be set like so:
>
	let g:switchcolor_use_own_mappings = 1
<
*	Then you must map your chosen shortcuts to the statements below,
		and add them to your vimrc. (just 4yy from here)

  nmap <unique> <silent> <your keystroke> <Plug>SwitchColorCycle
  nmap <unique> <silent> <your keystroke> <Plug>SwitchColorEcho
  nmap <unique> <silent> <your keystroke> <Plug>SwitchColorForward
  nmap <unique> <silent> <your keystroke> <Plug>SwitchColorBackward

See: |:help map|

========================================================================
5.	Testing Hotkeys	*tstky-SwitchColor*

If you haven't quit and re started Vim by now, you should do so before
you come back here.

Test if all four keystrokes work, or those that you choose to implement.

Here follows a recipe for making keystrokes work, if a keystroke doesn't
seem to work, yours or mine if you chose to use the defaults:

First of all you should run:
	:messages
to see if there has been any conflicts during startup.

If there is none, concerning keystrokes, then its time to check if its
the key that needs to be set explicitly, or if the key needs a different
setting on your keyboard, than you thought, or I.

Example~

	I wanted to use alt/opt-6 to cycle forward, I couldn't make the keystroke work
	with the mapping above. I opened a terminal window with "\cat -vEt" and typed
	*alt/opt-6* The terminal responded by echoing "^[6". I had already mapped <M-6>
	so, now I knew I hade to put the execute statement below, in front of
	my mapping, binding the keyboard sequence to that particular key: >
		("^[" in the terminal window, gets specified with "\e" by Vim.)

  execute "set <M-6>=\e6"


========================================================================
6	Customizing SwitchColor *custom-SwitchColor*

Configuring SwitchColor to your whim. (Pun intended.)

6.1 Preliminary *dbgtech-SwitchColor*

There are several variables available in SwitchColor which you  use to
adjust its behavior. There is handler in the plugin, that lets you see
its current value. >

	:call SwiColDebugInfo()

(You can "yy" the line above, press ":" then press Ctrl-R, then press ",
then hit enter.  If nothing happens, then the lazy load haven`t been
performed yet, and you need to: >

	:source /path/to/plugin/SwitchColor.vim

If your hotkeys aren't enabled, otherwise, press |cycle forward| or |cycle backward|!

The normal cycle in setting/testing those variables are >

		edit the variable in vimrc
		source vimrc
		inspect the values returned by SwiColDebugInfo(()

I you have any keybinding problem, see: *testkeys-SwitchColor*

* Try exiting and starting vim again, and control that your last choosen
	colorscheme is active. If it isn`t, then read about |g:SC_dotfilename|. 

6.2 Config settings *cfgvar-SwitchColor*

|Disabling| |SwitchColor|
*	You can at any time disable SwitchColor in your .vimrc 
	by inserting the statement below: (just yy) that will disable loading of the
	plugin. It won`t be loaded from the next time you start up Vim.
>
			let g:loaded_switchcolor = 1

Problems concerning the dotfile see: |dotf-SwitchColor|

Regarding the variable for using own mapping see |hotky-SwitchColor| >

	let g:switchcolor_use_own_mappings = 1

Configurable variables for your vimrc: shown with their default values
on a Unix/OsX machine. >

		g:SC_excluded       "['default']" (For illustration purposes.)
		g:SC_dotfile_name   '$HOME/.curcolors' for unix users.
		g:SC_colosch_fback  'desert'
		g:SC_schemesforuse  'whole_runtime' 
<
		|g:SC_schemesforuse| has three and only three acceptable constant values:

		|whole_runtime|   Vim runtime path is used to collect the color schemes.
 	|local_vim|       The color schemes in your local vim folder are used.
 	|user_specified|  A special folder of your choosing. Get the path right!

	If 'user_specified' is chosen, then a |g:SC_colorscheme_place| must specify an
	existing folder with color schemes. >

     g:SC_colorscheme_place    $HOME/vimfiles/favcolors

Example .vimrc settings: 

You will have to edit them. You should check the paths in
particular.
>
	let g:SC_excluded          = [ 'shine' ]
	let g:SC_schemesforuse     = 'local_only' 
	let g:SC_schemesforuse     = 'user_specified'
	let g:SC_dotfile_name      = '$HOME/.curcolors'
	let g:SC_colosch_fback     = 'evening'
	let g:SC_colorscheme_place = '$HOME/vimfiles/color/light' <

========================================================================
7	Fixing problems with the file storing color scheme: *dotf-SwitchColor*

	If you are here because Vim didn't save your files. 
Please see Section 6.1 to ease your troubles. 	|dbgtech-SwitchColor|

There are many reasons that a creation of a file in a specified location
won`t work. I won`t dwell with that, you fix it by doing the following:

1. Copy the line below into your vimrc, and specify an absolute path with
a filename or any combination of that and a variable you know exist, at a 
place you know you can create and write a file, that isn't temporary.

	let g:SC_dotfile_name      = '$HOME/.curcolors'

2. Save and source your vimrc file.

3. Inspect the output of >

	:call SwiColDebugInfo()

4. Look for the line with the variable: |s:fileCurColor| and see if that is 
what you expected.r

5. If it is, select a color scheme. Otherwise goto 1.

6. Quit Vim and restart.  It should now work just fine with your chosen scheme
	  showing. 

7. If it doesn't goto 3. Try to manually create an empty file.

========================================================================
8	Making filtered selections of colorschemes: *them-SwitchColor*

The idea is to filter down your collection of color themes to
selection to a specific set, so you don't have to cycle trough a lot of
schemes before you get to one your like.

It can be for providing alternatives for writing "c" like code, or vim syntax,
or having a set of only dark or light themes to choose from.

First of all you need to symlink the color files into a folder for the purpose,
or copy them, if you can't symlink. 

Copy the script below, edit your path to your subset of color schemes, and the path
to the plugin SwitchColor.vim.
>
    function! FilteredSchemes()
    	" My light backgrounds.
    	let g:SC_schemesforuse  = 'user_specified'
					let g:SC_colorscheme_place = '$HOME/vimfiles/color/light' " EDIT!
					if ! exists('*SwiColParseUserValues')
						source /path/to/SwitchColor.vim " EDIT!
					endif
    	call  SwiColParseUserValues()
    endfunction

Save it to a name, and source it in you vimrc, so the function is available
when you want it.

That's pretty much it, you may now create filtered  groups of your
color schemes in folders, and create functions to have them displayed.

Observe: Next time you start up vim, the current collection
of color schemes is the one specified in your .vimrc.

Enjoy! Arendal 2022-05-08 McUsr.

vim:tw=78:ts=2:noet:ft=help:
